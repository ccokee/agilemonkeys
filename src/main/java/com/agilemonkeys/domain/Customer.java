package com.agilemonkeys.domain;

import com.agilemonkeys.controller.validation.CustomerValidationGroup;
import com.agilemonkeys.controller.validation.ValidationPhotoFile;
import com.agilemonkeys.exception.PhotoFileException;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.apache.commons.io.FilenameUtils;
import org.hibernate.validator.constraints.Length;
import org.springframework.web.multipart.MultipartFile;
import javax.persistence.Id;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.Transient;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;
import java.io.IOException;
import java.util.Optional;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Data
@Entity
@Table(name = "customers")
public class Customer {
    @Id
    @Null(groups = CustomerValidationGroup.Add.class, message = "id is auto-generated.")
    @NotNull(groups = CustomerValidationGroup.Update.class, message = "id can't be null when updating.")
    String id;

    @Column(name = "name")
    @Length(min = 1, max = 50)
    String name;

    @Column(name = "surname")
    @Length(min = 1, max = 50)
    String surname;

    @Column(name = "created_by")
    @Null(groups = {CustomerValidationGroup.Add.class, CustomerValidationGroup.Update.class}, message = "createdBy is generated by the system.")
    String createdBy;

    @Column(name = "last_modified_by")
    @Null(groups = {CustomerValidationGroup.Add.class, CustomerValidationGroup.Update.class}, message = "lastModifiedBy is generated by the system.")
    String lastModifiedBy;

    @Column(name = "photo_url")
    @Null(groups = {CustomerValidationGroup.Add.class, CustomerValidationGroup.Update.class}, message = "photoUrl is generated by the system.")
    String photoUrl;

    @Column(name = "email")
    @Email(groups = {CustomerValidationGroup.Add.class, CustomerValidationGroup.Update.class}, message = "Email format not complaint.")
    String email;

    // This byte array won't be persisted in the Relational Repo.
    // It's included in the domain model so it can be persisted in the File Storage Repository.
    @Transient
    Optional<Photo> photo;

    public void setPhotoFromMultipartFile(MultipartFile photo) {
        Optional<Photo> optionalPhoto = Optional.empty();

        // Check if photo was included in the request. Otherwise just return
        if(photo != null) {

            // Check if provided File is actually a photo and if it's less than maxSize, otherwise throw Exception.
            if (ValidationPhotoFile.contentTypes.contains(photo.getContentType()) && photo.getSize() < ValidationPhotoFile.maxSize) {
                String extension = FilenameUtils.getExtension(photo.getOriginalFilename());
                try {
                    optionalPhoto = Optional.of(
                            Photo.builder()
                                    .byteArray(photo.getBytes())
                                    .fileFormat(extension)
                                    .build());
                } catch (IOException e) {
                    throw new PhotoFileException(e);
                }
            }  else{
                throw new PhotoFileException("Provided file must be either a PNG, GIF or JPEG and must be less than 5 MB.");
            }
        }
        this.setPhoto(optionalPhoto);
    }
}
